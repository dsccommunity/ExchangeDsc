$script:DSCModuleName = 'ExchangeDsc'
$script:DSCResourceName = 'DSC_ExchAntiMalwareScanning'
$script:moduleRoot = Split-Path -Parent (Split-Path -Parent $PSScriptRoot)

Import-Module -Name (Join-Path -Path $script:moduleRoot -ChildPath (Join-Path -Path 'tests' -ChildPath (Join-Path -Path 'TestHelpers' -ChildPath 'ExchangeDscTestHelper.psm1'))) -Global -Force

$script:testEnvironment = Invoke-TestSetup -DSCModuleName $script:dscModuleName -DSCResourceName $script:dscResourceName

function Invoke-TestCleanup
{
    Restore-TestEnvironment -TestEnvironment $script:testEnvironment
}

# Begin Testing
try
{
    InModuleScope $script:DSCResourceName {
        <#
            Define an empty function for Get-TransportAgent, so pester has something to Mock
            This cmdlet is normally loaded as part of Get-RemoteExchangeSession.
        #>
        function Get-TransportAgent
        {
        }

        $fakeCredentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList 'fakeuser', (New-Object -TypeName System.Security.SecureString)
        $mockEnableScriptPath = 'C:\Program Files\Microsoft\Exchange Server\V15\Scripts\Enable-AntimalwareScanning.ps1'
        $mockDisableScriptPath = 'C:\Program Files\Microsoft\Exchange Server\V15\Scripts\Disable-AntimalwareScanning.ps1'

        Describe 'DSC_ExchAntiMalwareScanning\Get-TargetResource' -Tag 'Get' {
            AfterEach {
                Assert-VerifiableMock
            }

            $getTargetResourceParams = @{
                Enabled    = $true
                Credential = $fakeCredentials
            }

            $getTransportAgentStandardOutput = @{
                Enabled = $true
            }

            Context 'When Get-TargetResource is called' {
                Mock -CommandName Get-RemoteExchangeSession -Verifiable
                Mock -CommandName Get-TransportAgent -Verifiable -MockWith { return $getTransportAgentStandardOutput }

                Test-CommonGetTargetResourceFunctionality -GetTargetResourceParams $getTargetResourceParams

                It 'Should return Enabled set to True if Get-TransportAgent returns Enabled set to True' {
                    $getResults = Get-TargetResource @getTargetResourceParams

                    $getResults.Enabled | Should -Be $true
                }

                It 'Should return Enabled set to False if Get-TransportAgent returns Enabled set to False' {
                    $defaultValue = $getTransportAgentStandardOutput.Enabled
                    $getTransportAgentStandardOutput.Enabled = $false

                    Mock -CommandName Get-TransportAgent -Verifiable -MockWith { return $getTransportAgentStandardOutput }

                    $getResults = Get-TargetResource @getTargetResourceParams

                    $getResults.Enabled | Should -Be $false

                    $getTransportAgentStandardOutput.Enabled = $defaultValue
                }
            }
        }

        Describe 'DSC_ExchAntiMalwareScanning\Set-TargetResource' -Tag 'Set' {
            AfterEach {
                Assert-VerifiableMock
            }

            Context 'When Enabled is set to True and AllowServiceRestart is set to False' {
                It 'Should run Enable-AntimalwareScanning.ps1 but not attempt a service restart' {
                    Mock -CommandName Write-Warning -Verifiable
                    Mock -CommandName Get-ItemProperty -Verifiable -MockWith {
                        return @{
                            MsiInstallPath = 'C:\Program Files\Microsoft\Exchange Server\V15\'
                        }
                    }
                    Mock -CommandName Invoke-DotSourcedScript -Verifiable -ParameterFilter { $ScriptPath -eq $mockEnableScriptPath -and $ScriptParams.Count -eq 0 }

                    Set-TargetResource -Enabled $true -Credential $fakeCredentials -AllowServiceRestart $false
                }
            }

            Context 'When Enabled is set to True and AllowServiceRestart is set to True' {
                It 'Should run Enable-AntimalwareScanning.ps1 and attempt a service restart' {
                    Mock -CommandName Get-ItemProperty -Verifiable -MockWith {
                        return @{
                            MsiInstallPath = 'C:\Program Files\Microsoft\Exchange Server\V15\'
                        }
                    }
                    Mock -CommandName Invoke-DotSourcedScript -Verifiable -ParameterFilter { $ScriptPath -eq $mockEnableScriptPath -and $ScriptParams.ContainsKey('ForceRestart') -and $ScriptParams.ForceRestart -eq $true }

                    Set-TargetResource -Enabled $true -Credential $fakeCredentials -AllowServiceRestart $true
                }
            }

            Context 'When Enabled is set to False and AllowServiceRestart is set to False' {
                It 'Should run Disable-AntimalwareScanning.ps1 but not attempt a service restart' {
                    Mock -CommandName Write-Warning -Verifiable
                    Mock -CommandName Get-ItemProperty -Verifiable -MockWith {
                        return @{
                            MsiInstallPath = 'C:\Program Files\Microsoft\Exchange Server\V15\'
                        }
                    }
                    Mock -CommandName Invoke-DotSourcedScript -Verifiable -ParameterFilter { $ScriptPath -eq $mockDisableScriptPath -and $ScriptParams.Count -eq 0 }

                    Set-TargetResource -Enabled $false -Credential $fakeCredentials -AllowServiceRestart $false
                }
            }

            Context 'When Enabled is set to False and AllowServiceRestart is set to True' {
                It 'Should run Disable-AntimalwareScanning.ps1 and attempt a service restart' {
                    Mock -CommandName Get-ItemProperty -Verifiable -MockWith {
                        return @{
                            MsiInstallPath = 'C:\Program Files\Microsoft\Exchange Server\V15\'
                        }
                    }
                    Mock -CommandName Invoke-DotSourcedScript -Verifiable -ParameterFilter { $ScriptPath -eq $mockDisableScriptPath -and $ScriptParams.ContainsKey('ForceRestart') -and $ScriptParams.ForceRestart -eq $true }

                    Set-TargetResource -Enabled $false -Credential $fakeCredentials -AllowServiceRestart $true
                }
            }
        }

        Describe 'DSC_ExchAntiMalwareScanning\Test-TargetResource' -Tag 'Test' {
            AfterEach {
                Assert-VerifiableMock
            }

            Context 'When Enabled is set to True' {
                It 'Should return True when Get-TransportAgent returns Enabled set to True' {
                    Mock -CommandName Get-RemoteExchangeSession -Verifiable -MockWith { return $null }
                    Mock -CommandName Get-TransportAgent -Verifiable -MockWith {
                        return @{
                            Enabled = $true
                        }
                    }

                    $testResults = Test-TargetResource -Enabled $true -Credential $fakeCredentials

                    $testResults | Should -Be $true
                }

                It 'Should return False when Get-TransportAgent returns Enabled set to False' {
                    Mock -CommandName Get-RemoteExchangeSession -Verifiable -MockWith { return $null }
                    Mock -CommandName Get-TransportAgent -Verifiable -MockWith {
                        return @{
                            Enabled = $false
                        }
                    }

                    $testResults = Test-TargetResource -Enabled $true -Credential $fakeCredentials

                    $testResults | Should -Be $false
                }
            }

            Context 'When Enabled is set to False' {
                It 'Should return False when Get-TransportAgent returns Enabled set to True' {
                    Mock -CommandName Get-RemoteExchangeSession -Verifiable -MockWith { return $null }
                    Mock -CommandName Get-TransportAgent -Verifiable -MockWith {
                        return @{
                            Enabled = $true
                        }
                    }

                    $testResults = Test-TargetResource -Enabled $false -Credential $fakeCredentials

                    $testResults | Should -Be $false
                }

                It 'Should return True when Get-TransportAgent returns Enabled set to False' {
                    Mock -CommandName Get-RemoteExchangeSession -Verifiable -MockWith { return $null }
                    Mock -CommandName Get-TransportAgent -Verifiable -MockWith {
                        return @{
                            Enabled = $false
                        }
                    }

                    $testResults = Test-TargetResource -Enabled $false -Credential $fakeCredentials

                    $testResults | Should -Be $true
                }
            }

            Context 'When Get-TransportAgent does not return an agent status' {
                It 'Should return False' {
                    Mock -CommandName Get-RemoteExchangeSession -Verifiable -MockWith { return $null }
                    Mock -CommandName Get-TransportAgent -Verifiable -MockWith { return $null }

                    $testResults = Test-TargetResource -Enabled $false -Credential $fakeCredentials

                    $testResults | Should -Be $false
                }
            }
        }
    }
}
finally
{
    Invoke-TestCleanup
}
