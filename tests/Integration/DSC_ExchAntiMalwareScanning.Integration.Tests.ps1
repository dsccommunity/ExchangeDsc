<#
    .SYNOPSIS
        Automated unit integration for DSC_ExchtiMalwareScanning DSC Resource.
        This test module requires use of credentials.
        The first run through of the tests will prompt for credentials from the logged on user.
#>

#region HEADER
[System.String] $script:moduleRoot = Split-Path -Parent (Split-Path -Parent $PSScriptRoot)
[System.String] $script:DSCModuleName = 'ExchangeDsc'
[System.String] $script:DSCResourceFriendlyName = 'ExchntiMalwareScanning'
[System.String] $script:DSCResourceName = "MSFT_$($script:DSCResourceFriendlyName)"

Import-Module -Name (Join-Path -Path $script:moduleRoot -ChildPath (Join-Path -Path 'tests' -ChildPath (Join-Path -Path 'TestHelpers' -ChildPath 'ExchangeDscTestHelper.psm1'))) -Force
Import-Module -Name (Join-Path -Path $script:moduleRoot -ChildPath (Join-Path -Path 'source' -ChildPath (Join-Path -Path 'Modules' -ChildPath 'ExchangeDscHelper\ExchangeDscHelper.psd1'))) -Force
Import-Module -Name (Join-Path -Path $script:moduleRoot -ChildPath (Join-Path -Path 'source' -ChildPath (Join-Path -Path 'DSCResources' -ChildPath (Join-Path -Path "$($script:DSCResourceName)" -ChildPath "$($script:DSCResourceName).psm1"))))

# Check if Exchange is installed on this machine. If not, we can't run tests
[System.Boolean] $exchangeInstalled = Test-ExchangeSetupComplete

#endregion HEADER

if ($exchangeInstalled)
{
    # Get required credentials to use for the test
    $shellCredentials = Get-TestCredential

    Describe 'Test Enabling and Disabling Malware Scanning' {
        # Test enabling with no restart of the service
        $testParams = @{
            Enabled             = $true
            Credential          = $shellCredentials
            AllowServiceRestart = $false
        }

        $expectedGetResults = @{
            Enabled = $true
        }

        Test-TargetResourceFunctionality -Params $testParams `
            -ContextLabel 'Enable Malware Scanning - No Restart' `
            -ExpectedGetResults $expectedGetResults

        # Test disabling with no restart of the service
        $testParams.Enabled = $false
        $expectedGetResults.Enabled = $false

        Test-TargetResourceFunctionality -Params $testParams `
            -ContextLabel 'Disable Malware Scanning - No Restart' `
            -ExpectedGetResults $expectedGetResults


        # Test enabling with a restart of the service
        $testParams.Enabled = $true
        $testParams.AllowServiceRestart = $true
        $expectedGetResults.Enabled = $true

        Test-TargetResourceFunctionality -Params $testParams `
            -ContextLabel 'Enable Malware Scanning - With Restart' `
            -ExpectedGetResults $expectedGetResults


        # Test disabling with a restart of the service
        $testParams.Enabled = $false
        $expectedGetResults.Enabled = $false

        Test-TargetResourceFunctionality -Params $testParams `
            -ContextLabel 'Disable Malware Scanning - With Restart' `
            -ExpectedGetResults $expectedGetResults
    }
}
else
{
    Write-Verbose -Message 'Tests in this file require that Exchange is installed to be run.'
}
